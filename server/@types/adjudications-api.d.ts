/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/reported-adjudications/{chargeNumber}/witnesses/edit': {
    /**
     * Updates the witnesses for the reported adjudication.
     * @description 0 or more witnesses to be supplied, only updates records owned by current user
     */
    put: operations['updateWitnesses']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/status': {
    /** Set the status for the reported adjudication. */
    put: operations['setStatus']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/punishments/v2': {
    /** updates a set of punishments */
    put: operations['updateV2']
    post: operations['createV2']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/punishments/comment': {
    /** update punishment comment */
    put: operations['updatePunishmentComment']
    /** create punishment comment */
    post: operations['createPunishmentComment']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome': {
    /** amend outcome without a hearing (refer police, not proceed or quashed), unless its a referral outcome - not proceed */
    put: operations['amendOutcome']
    /** remove a not proceed without a referral outcome, or a quashed outcome */
    delete: operations['removeNotProceedWithoutReferralOrQuashed']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/issue': {
    /** Issue DIS Form */
    put: operations['setIssued']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/hearing/v2': {
    /** Amends latest hearing */
    put: operations['amendHearing']
    /** Create a new hearing */
    post: operations['createHearing']
    /** deletes latest hearing */
    delete: operations['deleteHearing']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/hearing/outcome/{status}/v2': {
    /** amends a hearing outcome and associated outcome */
    put: operations['amendHearingOutcomeV2']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/evidence/edit': {
    /**
     * Updates the evidence for the reported adjudication.
     * @description 0 or more evidence to be supplied, only updates records owned by current user
     */
    put: operations['updateEvidence']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/damages/edit': {
    /**
     * Updates the damages for the reported adjudication.
     * @description 0 or more damages to be supplied, only updates records owned by current user
     */
    put: operations['updateDamages']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/created-on-behalf-of': {
    /** Set created on behalf of */
    put: operations['setCreatedOnBehalfOf']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/witnesses': {
    /**
     * Set the witnesses for the draft adjudication.
     * @description 0 or more witnesses to be supplied
     */
    put: operations['setWitnesses']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/offence-details': {
    /**
     * Set the offence details for the draft adjudication.
     * @description At least one set of offence details must be supplied
     */
    put: operations['setOffenceDetails']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/incident-statement': {
    /** Edit the incident statement for a draft adjudication. */
    put: operations['editIncidentStatement']
    /** Add the incident statement to the draft adjudication. */
    post: operations['addIncidentStatement']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/incident-role': {
    /** Edit the incident role for a draft adjudication. */
    put: operations['editIncidentRole']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/incident-details': {
    /** Edit the incident details for a draft adjudication. */
    put: operations['editIncidentDetails']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/gender': {
    /** Set gender */
    put: operations['setGender']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/evidence': {
    /**
     * Set the evidence for the draft adjudication.
     * @description 0 or more evidence to be supplied
     */
    put: operations['setEvidence']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/damages': {
    /**
     * Set the damages for the draft adjudication.
     * @description 0 or more damages to be supplied
     */
    put: operations['setDamages']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/created-on-behalf-of': {
    /** Set created on behalf of */
    put: operations['setCreatedOnBehalfOf_1']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/associated-prisoner': {
    /** Set the associated prisoner for a draft adjudication. */
    put: operations['setIncidentRoleAssociatedPrisoner']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/applicable-rules': {
    /** Set applicable rules for incident */
    put: operations['setApplicableRules']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome/refer-police': {
    /** create a police refer outcome */
    post: operations['createRefPolice']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome/refer-gov': {
    /** create a referral outcome for refer gov */
    post: operations['createReferGov']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome/quashed': {
    /** quash an outcome */
    post: operations['createQuashed']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome/prosecution': {
    /** create a prosecution outcome */
    post: operations['createProsecution']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/outcome/not-proceed': {
    /** create a not proceed outcome - via referral or without hearing */
    post: operations['createNotProceed']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/hearing/outcome/referral': {
    /** create a referral for latest hearing */
    post: operations['createReferral']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/hearing/outcome/adjourn': {
    /** create a adjourn for latest hearing */
    post: operations['createAdjourn']
    /** removes the adjourn outcome */
    delete: operations['removeAdjourn']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/create-draft-adjudication': {
    /** Creates a draft adjudication from the reported adjudication with the given number. */
    post: operations['createDraftAdjudication']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/complete-hearing/not-proceed': {
    /** create a not proceed from hearing outcome */
    post: operations['createNotProceedFromHearing']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/complete-hearing/dismissed': {
    /** create a dismissed from hearing outcome */
    post: operations['createDismissed']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/complete-hearing/charge-proved/v2': {
    post: operations['createChargeProvedFromHearingV2']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications': {
    /** Starts a new draft adjudication. */
    post: operations['startNewAdjudication']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/complete-draft-adjudication': {
    /** Submits the draft adjudication to Prison-API, creates a submitted adjudication record and removes the draft adjudication. */
    post: operations['completeDraftAdjudication']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}/alo-offence-details': {
    /** Submits updated offence details and completes report.  Used by ALO when they need to amend offence details for submitted reports only */
    post: operations['aloOffenceUpdate']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/subject-access-request': {
    /** Returns all data associated to subject in JSON format */
    get: operations['subjectAccessRequest']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/v2': {
    get: operations['getReportedAdjudicationDetailsV2']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/reports': {
    /** Get all reported adjudications for caseload */
    get: operations['getReportedAdjudications']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/report-counts': {
    /** Get report counts by agency */
    get: operations['getReportCounts']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/punishments/{prisonerNumber}/suspended/v2': {
    /** get a list of suspended punishments by prisoner */
    get: operations['getSuspendedPunishments']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/punishments/{prisonerNumber}/for-consecutive': {
    /** get a list of active additional days reports by prisoner for a consecutive punishment */
    get: operations['getActiveAdditionalDaysReports']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/punishments/{offenderBookingId}/active': {
    /** get a list of active punishments by offenderBookingId */
    get: operations['getActivePunishments']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/prisoner/{prisonerNumber}': {
    /** Get all adjudications for a prisoner */
    get: operations['getAdjudicationsForPrisoner']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/my-reports': {
    /** Get my reported adjudications for caseload */
    get: operations['getMyReportedAdjudications']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/hearings': {
    /** Get a list of hearings for a given date and agency */
    get: operations['getAllHearingsByAgencyAndDate']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/for-print': {
    /** Get all reported adjudications for print */
    get: operations['getReportedAdjudicationsForPrint']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/for-issue': {
    /** Get all reported adjudications for issue */
    get: operations['getReportedAdjudicationsForIssue']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/bookings/prisoner/{prisonerNumber}': {
    /** Get adjudications for all offender bookings for a prisoner */
    get: operations['getAdjudicationsForPrisoner_1']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/booking/{bookingId}': {
    /** Get adjudications for an offender booking */
    get: operations['getAdjudicationsForBooking']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/all-by-booking/{offenderBookingId}': {
    /** Get all adjudications for an offender booking id */
    get: operations['getAdjudicationsForBooking_1']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/{id}': {
    /** Returns the draft adjudication details. */
    get: operations['getDraftAdjudicationDetails']
    /** Delete by Id. Only owner can delete. */
    delete: operations['deleteDraftAdjudication']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/offence-rules': {
    /** Returns all the offence rules */
    get: operations['getOffenceRules']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/offence-rule/{offenceCode}': {
    /** Returns details of the offence rule relating to this offence code. */
    get: operations['getOffenceRule']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/draft-adjudications/my-reports': {
    /** Returns all the in progress draft adjudications created by the current user */
    get: operations['getCurrentUsersInProgressDraftAdjudications']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/adjudications/{prisonerNumber}/charge/{chargeId}': {
    /** Return a specific adjudication for a prisoner reference by charge ID */
    get: operations['getAdjudication']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/adjudications/{prisonerNumber}/adjudications': {
    /** Return a list of adjudications for a given prisoner */
    get: operations['getAdjudicationsByPrisonerNumber']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/adjudications/by-booking-id/{bookingId}': {
    /**
     * Offender adjudications summary (awards and sanctions).
     * @description Offender adjudications (awards and sanctions).
     */
    get: operations['getAdjudicationSummary']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/adjudications/booking/{bookingId}/exists': {
    /**
     * Does the booking id have any adjudications
     * @description Does the booking id have any adjudications
     */
    get: operations['hasAdjudications']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/remove-referral': {
    /** remove a referral */
    delete: operations['removeReferral']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/remove-completed-hearing': {
    /** remove a completed hearing outcome */
    delete: operations['removeCompletedHearingOutcome']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
  '/reported-adjudications/{chargeNumber}/punishments/comment/{punishmentCommentId}': {
    /** delete punishment comment */
    delete: operations['deletePunishmentComment']
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Details of Witness */
    WitnessRequestItem: {
      /**
       * @description The witness code
       * @example PRISON_OFFICER
       * @enum {string}
       */
      code: 'OFFICER' | 'STAFF' | 'OTHER_PERSON' | 'VICTIM' | 'PRISONER'
      /**
       * @description Witness first name
       * @example Fred
       */
      firstName: string
      /**
       * @description Witness last name
       * @example Kruger
       */
      lastName: string
      /**
       * @description optional reporter as per token, used when editing
       * @example A_USER
       */
      reporter?: string
      /** @description username */
      username?: string
    }
    /** @description Request to update the list of witnesses for a draft adjudication */
    WitnessesRequest: {
      /** @description The details of all evidence */
      witnesses: components['schemas']['WitnessRequestItem'][]
    }
    /** @description Combined Outcome - currently to support referral but maybe expanded once awards are added */
    CombinedOutcomeDto: {
      outcome: components['schemas']['OutcomeDto']
      referralOutcome?: components['schemas']['OutcomeDto']
    }
    /** @description Previous DIS1/2 issues */
    DisIssueHistoryDto: {
      /** @description Previous issuing officer */
      issuingOfficer: string
      /**
       * @description Previous date time of form issued
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIssue: string
    }
    /** @description Hearing */
    HearingDto: {
      /**
       * Format: int64
       * @description The id of the hearing
       */
      id?: number
      /**
       * Format: int64
       * @description The id of the location of the hearing
       */
      locationId: number
      /**
       * @description Date and time the hearing will take place
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfHearing: string
      /**
       * @description oic hearing type
       * @enum {string}
       */
      oicHearingType: 'GOV_ADULT' | 'GOV_YOI' | 'INAD_YOI' | 'GOV' | 'INAD_ADULT'
      outcome?: components['schemas']['HearingOutcomeDto']
      /** @description agency id of hearing */
      agencyId: string
    }
    /** @description hearing outcome */
    HearingOutcomeDto: {
      /**
       * Format: int64
       * @description The id of the hearing outcome
       */
      id?: number
      /** @description adjudicator of hearing */
      adjudicator: string
      /**
       * @description the hearing outcome code
       * @enum {string}
       */
      code: 'COMPLETE' | 'REFER_POLICE' | 'REFER_INAD' | 'ADJOURN' | 'NOMIS' | 'REFER_GOV'
      /**
       * @description reason for outcome
       * @enum {string}
       */
      reason?:
        | 'LEGAL_ADVICE'
        | 'LEGAL_REPRESENTATION'
        | 'RO_ATTEND'
        | 'HELP'
        | 'UNFIT'
        | 'WITNESS'
        | 'WITNESS_SUPPORT'
        | 'MCKENZIE'
        | 'EVIDENCE'
        | 'INVESTIGATION'
        | 'OTHER'
      /** @description details of outcome */
      details?: string
      /**
       * @description hearing outcome plea
       * @enum {string}
       */
      plea?: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
    }
    /** @description Incident details */
    IncidentDetailsDto: {
      /**
       * Format: int64
       * @description The id of the location the incident took place
       */
      locationId: number
      /**
       * @description Date and time the incident occurred
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIncident: string
      /**
       * @description Date time if discovery date different to incident date
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfDiscovery: string
      /**
       * @description When this report must be handed to the prisoner
       * @example 2021-07-05T10:35:17
       */
      handoverDeadline: string
    }
    /** @description Incident Role */
    IncidentRoleDto: {
      /**
       * @description The incident role code, If not set then it is assumed they committed the offence on their own
       * @example 25a
       */
      roleCode?: string
      offenceRule?: components['schemas']['OffenceRuleDetailsDto']
      /**
       * @description The prison number of the other prisoner involved in the incident, This only applies to role codes 25b and 25c
       * @example G2996UX
       */
      associatedPrisonersNumber?: string
      /**
       * @description The name of the other prisoner involved in the incident, This only applies when the prisoner is from outside the establishment
       * @example G2996UX
       */
      associatedPrisonersName?: string
    }
    /** @description Incident statement */
    IncidentStatementDto: {
      /** @description The statement regarding the incident */
      statement: string
      /** @description Indicates when the statement is complete */
      completed?: boolean
    }
    /** @description Details of an offence */
    OffenceDto: {
      /**
       * Format: int32
       * @description The offence code
       * @example 3
       */
      offenceCode: number
      offenceRule: components['schemas']['OffenceRuleDto']
      /**
       * @description The prison number of the victim involved in the incident, if relevant
       * @example G2996UX
       */
      victimPrisonersNumber?: string
      /**
       * @description The username of the member of staff who is a victim of the incident, if relevant
       * @example ABC12D
       */
      victimStaffUsername?: string
      /**
       * @description The name of the victim (who is not a member of staff or a prisoner) involved in the incident, if relevant
       * @example Bob Hope
       */
      victimOtherPersonsName?: string
    }
    /** @description Details of a rule they have broken */
    OffenceRuleDetailsDto: {
      /**
       * @description The paragraph number relating to the offence rule they have been alleged to have broken
       * @example 25(a)
       */
      paragraphNumber: string
      /**
       * @description The name relating to the paragraph description
       * @example Committed an assault
       */
      paragraphDescription: string
    }
    /** @description Details of a rule they have broken */
    OffenceRuleDto: {
      /**
       * @description The paragraph number relating to the offence rule they have been alleged to have broken
       * @example 25(a)
       */
      paragraphNumber: string
      /**
       * @description The name relating to the paragraph description
       * @example Committed an assault
       */
      paragraphDescription: string
      /** @description nomis code - not set if migrated data */
      nomisCode?: string
      /** @description with others nomis code, not set if migrated data */
      withOthersNomisCode?: string
    }
    /** @description the optional referral outcome */
    OutcomeDto: {
      /**
       * Format: int64
       * @description The id of the outcome
       */
      id?: number
      /**
       * @description outcome code
       * @enum {string}
       */
      code:
        | 'REFER_POLICE'
        | 'REFER_INAD'
        | 'REFER_GOV'
        | 'NOT_PROCEED'
        | 'DISMISSED'
        | 'PROSECUTION'
        | 'SCHEDULE_HEARING'
        | 'CHARGE_PROVED'
        | 'QUASHED'
      /** @description optional details */
      details?: string
      /**
       * @description optional not proceeded with reason
       * @enum {string}
       */
      reason?:
        | 'ANOTHER_WAY'
        | 'RELEASED'
        | 'WITNESS_NOT_ATTEND'
        | 'UNFIT'
        | 'FLAWED'
        | 'EXPIRED_NOTICE'
        | 'EXPIRED_HEARING'
        | 'NOT_FAIR'
        | 'OTHER'
      /**
       * @description optional quashed reason
       * @enum {string}
       */
      quashedReason?: 'FLAWED_CASE' | 'JUDICIAL_REVIEW' | 'APPEAL_UPHELD' | 'OTHER'
      /** @description flag to indicate if the outcome can be removed */
      canRemove: boolean
    }
    /** @description Hearings, hearing outcomes, referrals and outcomes in chronological order */
    OutcomeHistoryDto: {
      hearing?: components['schemas']['HearingDto']
      outcome?: components['schemas']['CombinedOutcomeDto']
    }
    /** @description punishment comment */
    PunishmentCommentDto: {
      /**
       * Format: int64
       * @description punishment comment id used for edit and delete
       */
      id?: number
      /** @description comment on punishment */
      comment: string
      /**
       * @description punishment reason for change
       * @enum {string}
       */
      reasonForChange?: 'APPEAL' | 'CORRECTION' | 'OTHER' | 'GOV_OR_DIRECTOR'
      /** @description username of the person created or updated the comment */
      createdByUserId?: string
      /**
       * @description date and time comment was created or updated
       * @example 2021-07-05T10:35:17
       */
      dateTime?: string
    }
    /** @description punishment */
    PunishmentDto: {
      /**
       * Format: int64
       * @description punishment id used for edit and delete
       */
      id?: number
      /**
       * @description punishment type
       * @enum {string}
       */
      type:
        | 'PRIVILEGE'
        | 'EARNINGS'
        | 'CONFINEMENT'
        | 'REMOVAL_ACTIVITY'
        | 'EXCLUSION_WORK'
        | 'EXTRA_WORK'
        | 'REMOVAL_WING'
        | 'ADDITIONAL_DAYS'
        | 'PROSPECTIVE_DAYS'
        | 'CAUTION'
        | 'DAMAGES_OWED'
      /**
       * @description optional privilege type
       * @enum {string}
       */
      privilegeType?: 'CANTEEN' | 'FACILITIES' | 'MONEY' | 'TV' | 'ASSOCIATION' | 'GYM' | 'OTHER'
      /** @description optional other privilege type */
      otherPrivilege?: string
      /**
       * Format: int32
       * @description optional stoppage of earnings percentage
       */
      stoppagePercentage?: number
      /** @description optional activated by report number */
      activatedBy?: string
      /** @description optional activated from report number */
      activatedFrom?: string
      schedule: components['schemas']['PunishmentScheduleDto']
      /** @description optional consecutive charge number */
      consecutiveChargeNumber?: string
      /** @description optional consecutive report number is available to view in adjudications service */
      consecutiveReportAvailable?: boolean
      /**
       * Format: double
       * @description optional amount - money being recovered for damages
       */
      damagesOwedAmount?: number
      /** @description flag to indicate if the punishment can be removed */
      canRemove: boolean
    }
    /** @description punishment schedule */
    PunishmentScheduleDto: {
      /**
       * Format: int32
       * @description days punishment will last
       */
      days: number
      /**
       * Format: date
       * @description optional start date of punishment
       */
      startDate?: string
      /**
       * Format: date
       * @description optional end date of punishment
       */
      endDate?: string
      /**
       * Format: date
       * @description optional punishment suspended until date
       */
      suspendedUntil?: string
    }
    /** @description Reported adjudication details */
    ReportedAdjudicationDto: {
      /** @description The charge number for the reported adjudication */
      chargeNumber: string
      /**
       * @description Prison number assigned to a prisoner
       * @example G2996UX
       */
      prisonerNumber: string
      /**
       * @description Gender applied for adjudication rules
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE'
      incidentDetails: components['schemas']['IncidentDetailsDto']
      /** @description Is classified as a youth offender */
      isYouthOffender: boolean
      incidentRole: components['schemas']['IncidentRoleDto']
      offenceDetails: components['schemas']['OffenceDto']
      incidentStatement: components['schemas']['IncidentStatementDto']
      /** @description Created by user id */
      createdByUserId: string
      /**
       * @description When the report was created
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      /**
       * @description reported adjudication status codes
       * @enum {string}
       */
      status:
        | 'ACCEPTED'
        | 'REJECTED'
        | 'AWAITING_REVIEW'
        | 'RETURNED'
        | 'UNSCHEDULED'
        | 'SCHEDULED'
        | 'REFER_POLICE'
        | 'REFER_INAD'
        | 'REFER_GOV'
        | 'PROSECUTION'
        | 'DISMISSED'
        | 'NOT_PROCEED'
        | 'ADJOURNED'
        | 'CHARGE_PROVED'
        | 'QUASHED'
        | 'INVALID_OUTCOME'
        | 'INVALID_SUSPENDED'
        | 'INVALID_ADA'
      /** @description Reviewed by user id */
      reviewedByUserId?: string
      /** @description The reason for the status of the reported adjudication */
      statusReason?: string
      /** @description The name for the status of the reported adjudication */
      statusDetails?: string
      /** @description Damages related to incident */
      damages: components['schemas']['ReportedDamageDto'][]
      /** @description Evidence related to incident */
      evidence: components['schemas']['ReportedEvidenceDto'][]
      /** @description Witnesses related to incident */
      witnesses: components['schemas']['ReportedWitnessDto'][]
      /** @description Hearings related to adjudication */
      hearings: components['schemas']['HearingDto'][]
      /** @description The last issuing officer */
      issuingOfficer?: string
      /**
       * @description The last date time of form issued
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIssue?: string
      /** @description Previous DIS1/2 issues */
      disIssueHistory: components['schemas']['DisIssueHistoryDto'][]
      /**
       * @description date time of first hearing
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfFirstHearing?: string
      /** @description Hearings, hearing outcomes, referrals and outcomes in chronological order */
      outcomes: components['schemas']['OutcomeHistoryDto'][]
      /** @description punishments */
      punishments: components['schemas']['PunishmentDto'][]
      /** @description punishments */
      punishmentComments: components['schemas']['PunishmentCommentDto'][]
      /** @description flag to indicate a hearing outcome was entered in NOMIS */
      outcomeEnteredInNomis: boolean
      /** @description optional override agency id */
      overrideAgencyId?: string
      /** @description agency id where report was created */
      originatingAgencyId: string
      /** @description optional actions flag to indicate if an ALO can carry out actions against a transferable adjudication, null if not transferable */
      transferableActionsAllowed?: boolean
      /** @description Name the officer the report was created on behalf of */
      createdOnBehalfOfOfficer?: string
      /** @description Reason why the report was created on behalf of another officer */
      createdOnBehalfOfReason?: string
      /** @description list of linked nomis charges, where multiple offences recorded on a single charge */
      linkedChargeNumbers: string[]
      /** @description flag to indicate if the user can action this item via the history page */
      canActionFromHistory: boolean
    }
    /** @description Reported adjudication response */
    ReportedAdjudicationResponse: {
      reportedAdjudication: components['schemas']['ReportedAdjudicationDto']
    }
    /** @description Reported damages */
    ReportedDamageDto: {
      /**
       * @description The damage code based on an enum for defined damages
       * @example CLEANING
       * @enum {string}
       */
      code:
        | 'ELECTRICAL_REPAIR'
        | 'PLUMBING_REPAIR'
        | 'FURNITURE_OR_FABRIC_REPAIR'
        | 'LOCK_REPAIR'
        | 'REDECORATION'
        | 'CLEANING'
        | 'REPLACE_AN_ITEM'
      /**
       * @description The details of the damage
       * @example the kettle was broken
       */
      details: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Reported evidence */
    ReportedEvidenceDto: {
      /**
       * @description The evidence code based on an enum for defined evidence
       * @example PHOTO
       * @enum {string}
       */
      code: 'PHOTO' | 'BODY_WORN_CAMERA' | 'CCTV' | 'BAGGED_AND_TAGGED' | 'OTHER'
      /**
       * @description Evidence identifier
       * @example Tag number or Camera number
       */
      identifier?: string
      /**
       * @description The details of the evidence
       * @example ie what does the photo describe
       */
      details: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Reported witness */
    ReportedWitnessDto: {
      /**
       * @description The witness code based on an enum for defined witness
       * @example PRISON_OFFICER
       * @enum {string}
       */
      code: 'OFFICER' | 'STAFF' | 'OTHER_PERSON' | 'VICTIM' | 'PRISONER'
      /**
       * @description Witness first name
       * @example Fred
       */
      firstName: string
      /**
       * @description Witness last name
       * @example Kruger
       */
      lastName: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Request to set the state for an a reported adjudication */
    ReportedAdjudicationStatusRequest: {
      /**
       * @description reported adjudication status codes
       * @enum {string}
       */
      status:
        | 'ACCEPTED'
        | 'REJECTED'
        | 'AWAITING_REVIEW'
        | 'RETURNED'
        | 'UNSCHEDULED'
        | 'SCHEDULED'
        | 'REFER_POLICE'
        | 'REFER_INAD'
        | 'REFER_GOV'
        | 'PROSECUTION'
        | 'DISMISSED'
        | 'NOT_PROCEED'
        | 'ADJOURNED'
        | 'CHARGE_PROVED'
        | 'QUASHED'
        | 'INVALID_OUTCOME'
        | 'INVALID_SUSPENDED'
        | 'INVALID_ADA'
      /** @description The reason the status has been set */
      statusReason?: string
      /** @description Details of why the status has been set */
      statusDetails?: string
    }
    /** @description punishment request */
    PunishmentRequest: {
      /**
       * Format: int64
       * @description id of punishment
       */
      id?: number
      /**
       * @description punishment type
       * @enum {string}
       */
      type:
        | 'PRIVILEGE'
        | 'EARNINGS'
        | 'CONFINEMENT'
        | 'REMOVAL_ACTIVITY'
        | 'EXCLUSION_WORK'
        | 'EXTRA_WORK'
        | 'REMOVAL_WING'
        | 'ADDITIONAL_DAYS'
        | 'PROSPECTIVE_DAYS'
        | 'CAUTION'
        | 'DAMAGES_OWED'
      /**
       * @description privilege type - only use if punishment type is PRIVILEGE
       * @enum {string}
       */
      privilegeType?: 'CANTEEN' | 'FACILITIES' | 'MONEY' | 'TV' | 'ASSOCIATION' | 'GYM' | 'OTHER'
      /** @description other privilege type - only use if privilege type is OTHER */
      otherPrivilege?: string
      /**
       * Format: int32
       * @description stoppage percentage - use if punishment type is EARNINGS
       */
      stoppagePercentage?: number
      /**
       * Format: int32
       * @description days punishment to last
       */
      days?: number
      /**
       * Format: date
       * @description punishment start date, required if punishment is not suspended
       */
      startDate?: string
      /**
       * Format: date
       * @description punishment end date, required if punishment is not suspended
       */
      endDate?: string
      /**
       * Format: date
       * @description punishment suspended until date, required if punishment is suspended
       */
      suspendedUntil?: string
      /** @description optional activated from report number */
      activatedFrom?: string
      /** @description optional consecutive charge number */
      consecutiveChargeNumber?: string
      /**
       * Format: double
       * @description optional amount - money being recovered for damages - only use if type is DAMAGED_OWED
       */
      damagesOwedAmount?: number
    }
    /** @description punishments request */
    PunishmentsRequest: {
      /** @description list of punishments */
      punishments: components['schemas']['PunishmentRequest'][]
    }
    /** @description Error Response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description Status of Error
       * @example 500
       */
      status: number
      /**
       * Format: int32
       * @description Error Code
       * @example 500
       */
      errorCode?: number
      /**
       * @description User Message of error
       * @example Bad Data
       */
      userMessage?: string
      /**
       * @description More detailed error message
       * @example This is a stack trace
       */
      developerMessage?: string
      /**
       * @description More information about the error
       * @example More info
       */
      moreInfo?: string
    }
    /** @description punishment comment request */
    PunishmentCommentRequest: {
      /**
       * Format: int64
       * @description id of punishment comment
       */
      id?: number
      /** @description punishment comment */
      comment: string
      /**
       * @description punishment reason for change
       * @enum {string}
       */
      reasonForChange?: 'APPEAL' | 'CORRECTION' | 'OTHER' | 'GOV_OR_DIRECTOR'
    }
    /** @description amend outcome without a hearing - NOT PROCEED, REFER POLICE, QUASHED */
    AmendOutcomeRequest: {
      /** @description details */
      details: string
      /**
       * @description not proceed reason
       * @enum {string}
       */
      reason?:
        | 'ANOTHER_WAY'
        | 'RELEASED'
        | 'WITNESS_NOT_ATTEND'
        | 'UNFIT'
        | 'FLAWED'
        | 'EXPIRED_NOTICE'
        | 'EXPIRED_HEARING'
        | 'NOT_FAIR'
        | 'OTHER'
      /**
       * @description quashed reason
       * @enum {string}
       */
      quashedReason?: 'FLAWED_CASE' | 'JUDICIAL_REVIEW' | 'APPEAL_UPHELD' | 'OTHER'
    }
    /** @description Request to issue a DIS */
    IssueRequest: {
      /**
       * @description The date time of issue
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIssue: string
    }
    /** @description Request to add a hearing */
    HearingRequest: {
      /**
       * Format: int64
       * @description The id of the location of the hearing
       */
      locationId: number
      /**
       * @description Date and time of the hearing
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfHearing: string
      /**
       * @description oic hearing type
       * @enum {string}
       */
      oicHearingType: 'GOV_ADULT' | 'GOV_YOI' | 'INAD_YOI' | 'GOV' | 'INAD_ADULT'
    }
    /** @description amend hearing outcome request */
    AmendHearingOutcomeRequest: {
      /** @description the name of the adjudicator */
      adjudicator?: string
      /**
       * @description the adjourn reason
       * @enum {string}
       */
      adjournReason?:
        | 'LEGAL_ADVICE'
        | 'LEGAL_REPRESENTATION'
        | 'RO_ATTEND'
        | 'HELP'
        | 'UNFIT'
        | 'WITNESS'
        | 'WITNESS_SUPPORT'
        | 'MCKENZIE'
        | 'EVIDENCE'
        | 'INVESTIGATION'
        | 'OTHER'
      /**
       * @description not proceed reason
       * @enum {string}
       */
      notProceedReason?:
        | 'ANOTHER_WAY'
        | 'RELEASED'
        | 'WITNESS_NOT_ATTEND'
        | 'UNFIT'
        | 'FLAWED'
        | 'EXPIRED_NOTICE'
        | 'EXPIRED_HEARING'
        | 'NOT_FAIR'
        | 'OTHER'
      /** @description details */
      details?: string
      /**
       * @description plea
       * @enum {string}
       */
      plea?: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
    }
    /** @description Request to update the list of evidence for a draft adjudication */
    EvidenceRequest: {
      /** @description The details of all evidence */
      evidence: components['schemas']['EvidenceRequestItem'][]
    }
    /** @description Details of Evidence */
    EvidenceRequestItem: {
      /**
       * @description The evidence code
       * @example PHOTO
       * @enum {string}
       */
      code: 'PHOTO' | 'BODY_WORN_CAMERA' | 'CCTV' | 'BAGGED_AND_TAGGED' | 'OTHER'
      /**
       * @description Evidence identifier
       * @example Tag number or Camera number
       */
      identifier?: string
      /**
       * @description details of the evidence
       * @example ie description of photo
       */
      details: string
      /**
       * @description optional reporter as per token, used when editing
       * @example A_USER
       */
      reporter?: string
    }
    /** @description Details of Damage */
    DamageRequestItem: {
      /**
       * @description The damage code
       * @example CLEANING
       * @enum {string}
       */
      code:
        | 'ELECTRICAL_REPAIR'
        | 'PLUMBING_REPAIR'
        | 'FURNITURE_OR_FABRIC_REPAIR'
        | 'LOCK_REPAIR'
        | 'REDECORATION'
        | 'CLEANING'
        | 'REPLACE_AN_ITEM'
      /**
       * @description details of the damage
       * @example the kettle was broken
       */
      details: string
      /**
       * @description optional reporter as per token, used when editing
       * @example A_USER
       */
      reporter?: string
    }
    /** @description Request to update the list of damages for a draft adjudication */
    DamagesRequest: {
      /** @description The details of all damages the prisoner is accused of */
      damages: components['schemas']['DamageRequestItem'][]
    }
    /** @description Request to update created on behalf of */
    CreatedOnBehalfOfRequest: {
      /** @description Name the officer the report was created on behalf of */
      createdOnBehalfOfOfficer: string
      /** @description Reason why the report was created on behalf of another officer */
      createdOnBehalfOfReason: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description damages */
    DamageDto: {
      /**
       * @description The damage code based on an enum for defined damages
       * @example CLEANING
       * @enum {string}
       */
      code:
        | 'ELECTRICAL_REPAIR'
        | 'PLUMBING_REPAIR'
        | 'FURNITURE_OR_FABRIC_REPAIR'
        | 'LOCK_REPAIR'
        | 'REDECORATION'
        | 'CLEANING'
        | 'REPLACE_AN_ITEM'
      /**
       * @description The details of the damage
       * @example the kettle was broken
       */
      details: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Draft adjudication details */
    DraftAdjudicationDto: {
      /**
       * Format: int64
       * @description Draft adjudication id
       */
      id: number
      /**
       * @description The charge number for the reported adjudication, Will only be present if this adjudication has been submitted to Prison-API
       * @example 4567123
       */
      chargeNumber?: string
      /**
       * @description Prison number assigned to a prisoner
       * @example G2996UX
       */
      prisonerNumber: string
      /**
       * @description Gender applied for adjudication rules
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE'
      incidentDetails: components['schemas']['IncidentDetailsDto']
      incidentRole?: components['schemas']['IncidentRoleDto']
      offenceDetails?: components['schemas']['OffenceDetailsDto']
      incidentStatement?: components['schemas']['IncidentStatementDto']
      /** @description The id of the user who started the adjudication */
      startedByUserId?: string
      /** @description Is classified as a youth offender */
      isYouthOffender?: boolean
      /** @description Damages related to incident */
      damages?: components['schemas']['DamageDto'][]
      /** @description Evidence related to incident */
      evidence?: components['schemas']['EvidenceDto'][]
      /** @description Witnesses related to incident */
      witnesses?: components['schemas']['WitnessDto'][]
      /** @description has the damages end point been called */
      damagesSaved?: boolean
      /** @description has the evidence end point been called */
      evidenceSaved?: boolean
      /** @description has the witnesses end point been called */
      witnessesSaved?: boolean
      /** @description optional override agency id */
      overrideAgencyId?: string
      /** @description agency id where report was created */
      originatingAgencyId: string
      /** @description Name the officer the report was created on behalf of */
      createdOnBehalfOfOfficer?: string
      /** @description Reason why the report was created on behalf of another officer */
      createdOnBehalfOfReason?: string
    }
    /** @description Draft adjudication response */
    DraftAdjudicationResponse: {
      draftAdjudication: components['schemas']['DraftAdjudicationDto']
    }
    /** @description evidence */
    EvidenceDto: {
      /**
       * @description The evidence code based on an enum for defined evidence
       * @example PHOTO
       * @enum {string}
       */
      code: 'PHOTO' | 'BODY_WORN_CAMERA' | 'CCTV' | 'BAGGED_AND_TAGGED' | 'OTHER'
      /**
       * @description Evidence identifier
       * @example Tag number or Camera number
       */
      identifier?: string
      /**
       * @description The details of the evidence
       * @example ie what does the photo show
       */
      details: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Details of an offence */
    OffenceDetailsDto: {
      /**
       * Format: int32
       * @description The offence code, This is the unique number relating to the type of offence they have been alleged to have committed
       * @example 3
       */
      offenceCode: number
      offenceRule: components['schemas']['OffenceRuleDetailsDto']
      /**
       * @description The prison number of the victim involved in the incident, if relevant
       * @example G2996UX
       */
      victimPrisonersNumber?: string
      /**
       * @description The username of the member of staff who is a victim of the incident, if relevant
       * @example ABC12D
       */
      victimStaffUsername?: string
      /**
       * @description The name of the victim (who is not a member of staff or a prisoner) involved in the incident, if relevant
       * @example Bob Hope
       */
      victimOtherPersonsName?: string
    }
    /** @description witness */
    WitnessDto: {
      /**
       * @description The witness code based on an enum for defined witness
       * @example PRISON_OFFICER
       * @enum {string}
       */
      code: 'OFFICER' | 'STAFF' | 'OTHER_PERSON' | 'VICTIM' | 'PRISONER'
      /**
       * @description Witness first name
       * @example Fred
       */
      firstName: string
      /**
       * @description Witness last name
       * @example Kruger
       */
      lastName: string
      /**
       * @description The username of the person who added this record
       * @example ABC12D
       */
      reporter: string
    }
    /** @description Request to update the list of offence details for a draft adjudication */
    OffenceDetailsRequest: {
      offenceDetails: components['schemas']['OffenceDetailsRequestItem']
    }
    /** @description Details of an offence */
    OffenceDetailsRequestItem: {
      /**
       * This is the unique number relating to the type of offence they have been alleged to have committed
       * Format: int32
       * @description The offence code
       * @example 3
       */
      offenceCode: number
      /**
       * @description The prison number of the victim involved in the incident, if relevant
       * @example G2996UX
       */
      victimPrisonersNumber?: string
      /**
       * @description The username of the member of staff who is a victim of the incident, if relevant
       * @example ABC12D
       */
      victimStaffUsername?: string
      /**
       * @description The name of the victim (who is not a member of staff or a prisoner) involved in the incident, if relevant
       * @example Bob Hope
       */
      victimOtherPersonsName?: string
    }
    /** @description Request to add or edit the incident statement for a draft adjudication */
    IncidentStatementRequest: {
      /** @description The statement regarding the incident */
      statement?: string
      completed?: boolean
    }
    /** @description Request to edit incident role */
    EditIncidentRoleRequest: {
      incidentRole: components['schemas']['IncidentRoleRequest']
      /** @description Whether to remove all existing offences */
      removeExistingOffences: boolean
    }
    /** @description Request to update the incident role */
    IncidentRoleRequest: {
      /**
       * If not set then it is assumed they committed the offence on their own
       * @description The incident role code
       * @example 25a
       */
      roleCode?: string
    }
    /** @description Request to edit the incident details */
    EditIncidentDetailsRequest: {
      /**
       * Format: int64
       * @description The id of the location the incident took place
       */
      locationId: number
      /**
       * @description Date and time the incident occurred
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIncident: string
      /**
       * @description Optional Date time if discovery date different to incident date
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfDiscovery?: string
    }
    /** @description Request to update the gender */
    GenderRequest: {
      /**
       * Gender of prisoner
       * @description The gender
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE'
    }
    /** @description Request to set the associated prisoner */
    IncidentRoleAssociatedPrisonerRequest: {
      /**
       * @description The prison number of the other prisoner involved in the incident
       * @example G2996UX
       */
      associatedPrisonersNumber: string
      /**
       * This only applies if the associated prisoner is from outside the establishment
       * @description The name of the other prisoner involved in the incident
       */
      associatedPrisonersName?: string
    }
    /** @description Request to set applicable rules */
    ApplicableRulesRequest: {
      /** @description Indicates whether the applicable rules are for a young offender */
      isYouthOffenderRule: boolean
      /** @description Whether to remove all existing offences */
      removeExistingOffences: boolean
    }
    /** @description Request to add a police referral, or refer gov request */
    ReferralDetailsRequest: {
      /** @description details */
      details: string
    }
    /** @description Request to quash charge */
    QuashedRequest: {
      /** @description details */
      details: string
      /**
       * @description reason
       * @enum {string}
       */
      reason: 'FLAWED_CASE' | 'JUDICIAL_REVIEW' | 'APPEAL_UPHELD' | 'OTHER'
    }
    /** @description Request to add a not proceed - via referral or without hearing */
    NotProceedRequest: {
      /** @description details */
      details: string
      /**
       * @description reason
       * @enum {string}
       */
      reason:
        | 'ANOTHER_WAY'
        | 'RELEASED'
        | 'WITNESS_NOT_ATTEND'
        | 'UNFIT'
        | 'FLAWED'
        | 'EXPIRED_NOTICE'
        | 'EXPIRED_HEARING'
        | 'NOT_FAIR'
        | 'OTHER'
    }
    /** @description Request to create a referral for latest hearing */
    ReferralRequest: {
      /** @description the name of the adjudicator */
      adjudicator: string
      /**
       * @description the outcome code
       * @enum {string}
       */
      code: 'COMPLETE' | 'REFER_POLICE' | 'REFER_INAD' | 'ADJOURN' | 'NOMIS' | 'REFER_GOV'
      /** @description details */
      details: string
    }
    /** @description Request to create an adjourn for latest hearing */
    AdjournRequest: {
      /** @description the name of the adjudicator */
      adjudicator: string
      /**
       * @description the adjourn resaon
       * @enum {string}
       */
      reason:
        | 'LEGAL_ADVICE'
        | 'LEGAL_REPRESENTATION'
        | 'RO_ATTEND'
        | 'HELP'
        | 'UNFIT'
        | 'WITNESS'
        | 'WITNESS_SUPPORT'
        | 'MCKENZIE'
        | 'EVIDENCE'
        | 'INVESTIGATION'
        | 'OTHER'
      /** @description details */
      details: string
      /**
       * @description plea
       * @enum {string}
       */
      plea: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
    }
    /** @description Request to add a not proceed - hearing completed */
    HearingCompletedNotProceedRequest: {
      /** @description the name of the adjudicator */
      adjudicator: string
      /**
       * @description plea
       * @enum {string}
       */
      plea: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
      /**
       * @description reason
       * @enum {string}
       */
      reason:
        | 'ANOTHER_WAY'
        | 'RELEASED'
        | 'WITNESS_NOT_ATTEND'
        | 'UNFIT'
        | 'FLAWED'
        | 'EXPIRED_NOTICE'
        | 'EXPIRED_HEARING'
        | 'NOT_FAIR'
        | 'OTHER'
      /** @description details */
      details: string
    }
    /** @description Request to add dismissed - hearing completed */
    HearingCompletedDismissedRequest: {
      /** @description the name of the adjudicator */
      adjudicator: string
      /**
       * @description plea
       * @enum {string}
       */
      plea: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
      /** @description details */
      details: string
    }
    /** @description Request to add charge proved - hearing completed */
    HearingCompletedChargeProvedRequest: {
      /** @description the name of the adjudicator */
      adjudicator: string
      /**
       * @description plea
       * @enum {string}
       */
      plea: 'UNFIT' | 'ABSTAIN' | 'GUILTY' | 'NOT_GUILTY' | 'NOT_ASKED'
    }
    /** @description Request to create a new draft adjudication */
    NewAdjudicationRequest: {
      /**
       * @description Prison number assigned to a prisoner
       * @example G2996UX
       */
      prisonerNumber: string
      /**
       * @description Gender applied for adjuducation rules
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE'
      /**
       * @description The agency id (or caseload) associated with this adjudication
       * @example MDI
       */
      agencyId: string
      /**
       * @description The optional agencyId where the prisoner now resides
       * @example MDI
       */
      overrideAgencyId?: string
      /**
       * Format: int64
       * @description The id of the location the incident took place
       */
      locationId: number
      /**
       * @description Date and time the incident occurred
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfIncident: string
      /**
       * @description Optional Date time if discovery date different to incident date
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfDiscovery?: string
      /**
       * Format: int64
       * @description offender book id used for api calls from dps
       */
      offenderBookingId?: number
    }
    JsonNode: Record<string, never>
    /** @description Success Response */
    SuccessResponse: {
      content: components['schemas']['JsonNode']
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageReportedAdjudicationDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['ReportedAdjudicationDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      paged?: boolean
      unpaged?: boolean
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
    }
    SortObject: {
      empty?: boolean
      unsorted?: boolean
      sorted?: boolean
    }
    /** @description Agency Report counts DTO */
    AgencyReportCountsDto: {
      /**
       * Format: int64
       * @description total reports to review for agency
       */
      reviewTotal: number
      /**
       * Format: int64
       * @description total transferable reports to review for agency
       */
      transferReviewTotal: number
    }
    /** @description suspended punishment dto */
    SuspendedPunishmentDto: {
      /** @description charge number punishment from */
      chargeNumber: string
      /** @description indicates there is something wrong with this suspended punishment, and its within the last 6 months */
      corrupted: boolean
      punishment: components['schemas']['PunishmentDto']
    }
    /** @description additional days to activate dto */
    AdditionalDaysDto: {
      /** @description charge number punishment from */
      chargeNumber: string
      /**
       * Format: date
       * @description date charge proved
       */
      chargeProvedDate: string
      punishment: components['schemas']['PunishmentDto']
    }
    /** @description active punishment dto */
    ActivePunishmentDto: {
      /** @description charge number */
      chargeNumber: string
      /**
       * @description punishment type
       * @enum {string}
       */
      punishmentType:
        | 'PRIVILEGE'
        | 'EARNINGS'
        | 'CONFINEMENT'
        | 'REMOVAL_ACTIVITY'
        | 'EXCLUSION_WORK'
        | 'EXTRA_WORK'
        | 'REMOVAL_WING'
        | 'ADDITIONAL_DAYS'
        | 'PROSPECTIVE_DAYS'
        | 'CAUTION'
        | 'DAMAGES_OWED'
      /**
       * @description privilege type
       * @enum {string}
       */
      privilegeType?: 'CANTEEN' | 'FACILITIES' | 'MONEY' | 'TV' | 'ASSOCIATION' | 'GYM' | 'OTHER'
      /** @description other privilege description */
      otherPrivilege?: string
      /**
       * Format: int32
       * @description days applied
       */
      days?: number
      /**
       * Format: date
       * @description start date
       */
      startDate?: string
      /**
       * Format: date
       * @description last day
       */
      lastDay?: string
      /**
       * Format: double
       * @description amount
       */
      amount?: number
      /**
       * Format: int32
       * @description stoppage percentage
       */
      stoppagePercentage?: number
      /** @description activated from report */
      activatedFrom?: string
    }
    /** @description Hearing Summary */
    HearingSummaryDto: {
      /**
       * Format: int64
       * @description The id of the hearing
       */
      id?: number
      /**
       * @description Date and time the hearing will take place
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfHearing: string
      /**
       * @description Date and time the incident was discovered
       * @example 2021-07-05T10:35:17
       */
      dateTimeOfDiscovery: string
      /** @description The charge number for the reported adjudication */
      chargeNumber: string
      /**
       * @description Prison number assigned to a prisoner
       * @example G2996UX
       */
      prisonerNumber: string
      /**
       * @description type of hearing
       * @enum {string}
       */
      oicHearingType: 'GOV_ADULT' | 'GOV_YOI' | 'INAD_YOI' | 'GOV' | 'INAD_ADULT'
      /**
       * @description reported adjudication status codes
       * @enum {string}
       */
      status:
        | 'ACCEPTED'
        | 'REJECTED'
        | 'AWAITING_REVIEW'
        | 'RETURNED'
        | 'UNSCHEDULED'
        | 'SCHEDULED'
        | 'REFER_POLICE'
        | 'REFER_INAD'
        | 'REFER_GOV'
        | 'PROSECUTION'
        | 'DISMISSED'
        | 'NOT_PROCEED'
        | 'ADJOURNED'
        | 'CHARGE_PROVED'
        | 'QUASHED'
        | 'INVALID_OUTCOME'
        | 'INVALID_SUSPENDED'
        | 'INVALID_ADA'
    }
    /** @description All hearings response */
    HearingSummaryResponse: {
      /** @description The hearing summaries response */
      hearings: components['schemas']['HearingSummaryDto'][]
    }
    /** @description All issuable adjudications response */
    IssuableAdjudicationsResponse: {
      /** @description Th reported adjudications response */
      reportedAdjudications: components['schemas']['ReportedAdjudicationDto'][]
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PageDraftAdjudicationDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['DraftAdjudicationDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      empty?: boolean
    }
    /** @description An Adjudication Hearing */
    Hearing: {
      /**
       * Format: int64
       * @description OIC Hearing ID
       * @example 1985937
       */
      oicHearingId?: number
      /**
       * @description Hearing Type
       * @example Governor's Hearing Adult
       */
      hearingType?: string
      /**
       * @description Hearing Time
       * @example 2021-07-05T10:35:17
       */
      hearingTime?: string
      /**
       * @description Establishment
       * @example Moorland (HMP & YOI)
       */
      establishment?: string
      /**
       * @description Hearing Location
       * @example Adjudication Room
       */
      location?: string
      /**
       * @description Adjudicator First name
       * @example Bob
       */
      heardByFirstName?: string
      /**
       * @description Adjudicator Last name
       * @example Smith
       */
      heardByLastName?: string
      /**
       * @description Other Representatives
       * @example Councillor Adams
       */
      otherRepresentatives?: string
      /**
       * @description Comment
       * @example The defendant conducted themselves in a manner...
       */
      comment?: string
      /** @description Hearing Results */
      results?: components['schemas']['HearingResult'][]
    }
    /** @description A result from a hearing */
    HearingResult: {
      /**
       * @description OIC Offence Code
       * @example 51:22
       */
      oicOffenceCode?: string
      /**
       * @description Offence Type
       * @example Prison Rule 51
       */
      offenceType?: string
      /**
       * @description Offence Description
       * @example Disobeys any lawful order
       */
      offenceDescription?: string
      /**
       * @description Plea
       * @example Guilty
       */
      plea?: string
      /**
       * @description Finding
       * @example Charge Proved
       */
      finding?: string
      sanctions?: components['schemas']['Sanction'][]
    }
    /** @description Detail about an individual Adjudication */
    IndividualAdjudication: {
      /**
       * Format: int64
       * @description Adjudication Number
       * @example 1234567
       */
      adjudicationNumber: number
      /**
       * @description Incident Time
       * @example 2021-07-05T10:35:17
       */
      incidentTime?: string
      /**
       * @description Establishment
       * @example Moorland (HMP & YOI)
       */
      establishment?: string
      /**
       * @description Interior Location
       * @example Wing A
       */
      interiorLocation?: string
      /**
       * @description Incident Details
       * @example Whilst conducting an intelligence cell search...
       */
      incidentDetails?: string
      /**
       * Format: int64
       * @description Report Number
       * @example 1234567
       */
      reportNumber?: number
      /**
       * @description Report Type
       * @example Governor's Report
       */
      reportType?: string
      /**
       * @description Reporter First Name
       * @example John
       */
      reporterFirstName?: string
      /**
       * @description Reporter Last Name
       * @example Smith
       */
      reporterLastName?: string
      /**
       * @description Report Time
       * @example 2021-07-05T10:35:17
       */
      reportTime?: string
      /** @description Hearings */
      hearings?: components['schemas']['Hearing'][]
    }
    /** @description An Adjudication Sanction */
    Sanction: {
      /**
       * @description Sanction Type
       * @example Stoppage of Earnings (amount)
       */
      sanctionType?: string
      /**
       * Format: int64
       * @description Sanction Days
       * @example 14
       */
      sanctionDays?: number
      /**
       * Format: int64
       * @description Sanction Months
       * @example 1
       */
      sanctionMonths?: number
      /**
       * Format: int64
       * @description Compensation Amount
       * @example 50
       */
      compensationAmount?: number
      /**
       * @description Effective
       * @example 2021-07-05T10:35:17
       */
      effectiveDate?: string
      /**
       * @description Sanction status
       * @example Immediate
       */
      status?: string
      /**
       * @description Status Date
       * @example 2021-07-05T10:35:17
       */
      statusDate?: string
      /**
       * @description Comment
       * @example 14x LOTV, 14x LOGYM, 14x LOC, 14x LOA, 14x LOE 50%, 14x CC
       */
      comment?: string
      /**
       * Format: int64
       * @description Sanction Seq
       * @example 1
       */
      sanctionSeq?: number
      /**
       * Format: int64
       * @description Consecutive Sanction Seq
       * @example 1
       */
      consecutiveSanctionSeq?: number
    }
    /** @description An overview of an adjudication */
    Adjudication: {
      /**
       * Format: int64
       * @description Adjudication Number
       * @example 1234567
       */
      adjudicationNumber: number
      /**
       * @description Report Time
       * @example 2021-07-05T10:35:17
       */
      reportTime: string
      /**
       * Format: int64
       * @description Agency Incident Id
       * @example 1484302
       */
      agencyIncidentId: number
      /**
       * @description Agency Id
       * @example MDI
       */
      agencyId?: string
      /**
       * Format: int64
       * @description Party Sequence
       * @example 1
       */
      partySeq: number
      /** @description Charges made as part of the adjudication */
      adjudicationCharges?: components['schemas']['AdjudicationCharge'][]
    }
    /** @description A charge which was made as part of an adjudication */
    AdjudicationCharge: {
      /**
       * @description Charge Id
       * @example 1506763/1
       */
      oicChargeId?: string
      /**
       * @description Offence Code
       * @example 51:22
       */
      offenceCode?: string
      /**
       * @description Offence Description
       * @example Disobeys any lawful order
       */
      offenceDescription?: string
      /**
       * @description Offence Finding Code
       * @example PROVED
       */
      findingCode?: string
    }
    /** @description A complete list of the type of offences that this offender has had adjudications for */
    AdjudicationOffence: {
      /**
       * @description Offence Id
       * @example 8
       */
      id?: string
      /**
       * @description Offence Code
       * @example 51:7
       */
      code?: string
      /**
       * @description Offence Description
       * @example Escapes or absconds from prison or from legal custody
       */
      description?: string
    }
    AdjudicationSearchResponse: {
      results: components['schemas']['PageAdjudication']
      /** @description A complete list of the type of offences that this offender has had adjudications for */
      offences: components['schemas']['AdjudicationOffence'][]
      /** @description Complete list of agencies where this offender has had adjudications */
      agencies: components['schemas']['Prison'][]
    }
    /** @description Search results */
    PageAdjudication: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Adjudication'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      empty?: boolean
    }
    /** @description Complete list of agencies where this offender has had adjudications */
    Prison: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Indicates the Agency is active
       * @example true
       */
      active: boolean
    }
    /** @description Adjudication Summary for a prisoner */
    AdjudicationSummary: {
      /**
       * Format: int64
       * @description Prisoner Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Number of proven adjudications
       */
      adjudicationCount: number
      /** @description List of awards / sanctions */
      awards: components['schemas']['Award'][]
    }
    /** @description Adjudication award / sanction */
    Award: {
      /**
       * Format: int64
       * @description Id of booking
       */
      bookingId: number
      /** @description Type of award */
      sanctionCode: string
      /** @description Award type description */
      sanctionCodeDescription?: string
      /**
       * Format: int32
       * @description Number of months duration
       */
      months?: number
      /**
       * Format: int32
       * @description Number of days duration
       */
      days?: number
      /** @description Compensation amount */
      limit?: number
      /** @description Optional details */
      comment?: string
      /**
       * Format: date
       * @description Start of sanction
       */
      effectiveDate: string
      /** @description Award status (ref domain OIC_SANCT_ST) */
      status?: string
      /** @description Award status description */
      statusDescription?: string
      /**
       * Format: int64
       * @description Id of hearing
       */
      hearingId: number
      /**
       * Format: int32
       * @description hearing record sequence number
       */
      hearingSequence: number
    }
    /** @description Has Adjudications Response */
    HasAdjudicationsResponse: {
      /** @description flag to indicate the booking id has adjudications */
      hasAdjudications: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Updates the witnesses for the reported adjudication.
   * @description 0 or more witnesses to be supplied, only updates records owned by current user
   */
  updateWitnesses: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WitnessesRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set the status for the reported adjudication. */
  setStatus: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReportedAdjudicationStatusRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** updates a set of punishments */
  updateV2: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PunishmentsRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createV2: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PunishmentsRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** update punishment comment */
  updatePunishmentComment: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PunishmentCommentRequest']
      }
    }
    responses: {
      /** @description Punishment comment updated */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create punishment comment */
  createPunishmentComment: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PunishmentCommentRequest']
      }
    }
    responses: {
      /** @description Punishment comment created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** amend outcome without a hearing (refer police, not proceed or quashed), unless its a referral outcome - not proceed */
  amendOutcome: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendOutcomeRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** remove a not proceed without a referral outcome, or a quashed outcome */
  removeNotProceedWithoutReferralOrQuashed: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Issue DIS Form */
  setIssued: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IssueRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Amends latest hearing */
  amendHearing: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HearingRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Create a new hearing */
  createHearing: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HearingRequest']
      }
    }
    responses: {
      /** @description Hearing created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** deletes latest hearing */
  deleteHearing: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** amends a hearing outcome and associated outcome */
  amendHearingOutcomeV2: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
        status:
          | 'ACCEPTED'
          | 'REJECTED'
          | 'AWAITING_REVIEW'
          | 'RETURNED'
          | 'UNSCHEDULED'
          | 'SCHEDULED'
          | 'REFER_POLICE'
          | 'REFER_INAD'
          | 'REFER_GOV'
          | 'PROSECUTION'
          | 'DISMISSED'
          | 'NOT_PROCEED'
          | 'ADJOURNED'
          | 'CHARGE_PROVED'
          | 'QUASHED'
          | 'INVALID_OUTCOME'
          | 'INVALID_SUSPENDED'
          | 'INVALID_ADA'
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendHearingOutcomeRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the evidence for the reported adjudication.
   * @description 0 or more evidence to be supplied, only updates records owned by current user
   */
  updateEvidence: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EvidenceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the damages for the reported adjudication.
   * @description 0 or more damages to be supplied, only updates records owned by current user
   */
  updateDamages: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DamagesRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set created on behalf of */
  setCreatedOnBehalfOf: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatedOnBehalfOfRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Set the witnesses for the draft adjudication.
   * @description 0 or more witnesses to be supplied
   */
  setWitnesses: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WitnessesRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Set the offence details for the draft adjudication.
   * @description At least one set of offence details must be supplied
   */
  setOffenceDetails: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDetailsRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Edit the incident statement for a draft adjudication. */
  editIncidentStatement: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncidentStatementRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Add the incident statement to the draft adjudication. */
  addIncidentStatement: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncidentStatementRequest']
      }
    }
    responses: {
      /** @description Incident Statement Added */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Edit the incident role for a draft adjudication. */
  editIncidentRole: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditIncidentRoleRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Edit the incident details for a draft adjudication. */
  editIncidentDetails: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditIncidentDetailsRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set gender */
  setGender: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenderRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Set the evidence for the draft adjudication.
   * @description 0 or more evidence to be supplied
   */
  setEvidence: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EvidenceRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Set the damages for the draft adjudication.
   * @description 0 or more damages to be supplied
   */
  setDamages: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DamagesRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set created on behalf of */
  setCreatedOnBehalfOf_1: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatedOnBehalfOfRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set the associated prisoner for a draft adjudication. */
  setIncidentRoleAssociatedPrisoner: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncidentRoleAssociatedPrisonerRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Set applicable rules for incident */
  setApplicableRules: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicableRulesRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a police refer outcome */
  createRefPolice: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferralDetailsRequest']
      }
    }
    responses: {
      /** @description Police Reference Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a referral outcome for refer gov */
  createReferGov: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferralDetailsRequest']
      }
    }
    responses: {
      /** @description Refer Gov Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** quash an outcome */
  createQuashed: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuashedRequest']
      }
    }
    responses: {
      /** @description Outcome Quashed */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a prosecution outcome */
  createProsecution: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description Prosecution Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a not proceed outcome - via referral or without hearing */
  createNotProceed: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotProceedRequest']
      }
    }
    responses: {
      /** @description Not Proceeded Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a referral for latest hearing */
  createReferral: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferralRequest']
      }
    }
    responses: {
      /** @description Referral Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a adjourn for latest hearing */
  createAdjourn: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjournRequest']
      }
    }
    responses: {
      /** @description Adjourn Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** removes the adjourn outcome */
  removeAdjourn: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates a draft adjudication from the reported adjudication with the given number. */
  createDraftAdjudication: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description Draft Adjudication report created */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a not proceed from hearing outcome */
  createNotProceedFromHearing: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HearingCompletedNotProceedRequest']
      }
    }
    responses: {
      /** @description Not Proceeded Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** create a dismissed from hearing outcome */
  createDismissed: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HearingCompletedDismissedRequest']
      }
    }
    responses: {
      /** @description Charge Dismissed Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createChargeProvedFromHearingV2: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HearingCompletedChargeProvedRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Starts a new draft adjudication. */
  startNewAdjudication: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewAdjudicationRequest']
      }
    }
    responses: {
      /** @description New Adjudication Started */
      201: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Submits the draft adjudication to Prison-API, creates a submitted adjudication record and removes the draft adjudication. */
  completeDraftAdjudication: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    responses: {
      /** @description Draft Adjudication Completed */
      201: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Submits updated offence details and completes report.  Used by ALO when they need to amend offence details for submitted reports only */
  aloOffenceUpdate: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDetailsRequest']
      }
    }
    responses: {
      /** @description Reported adjudication */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the payload is in a format not supported by this endpoint. */
      415: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all data associated to subject in JSON format */
  subjectAccessRequest: {
    parameters: {
      query: {
        prn: string
        crn?: string
        frmDate?: string
        toDate?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description Adjudication returned */
      200: {
        content: {
          'application/json': components['schemas']['SuccessResponse']
        }
      }
      /** @description No content found */
      204: {
        content: {
          '*/*': components['schemas']['SuccessResponse']
        }
      }
      /** @description Subject Identifier is not recognised by this service */
      209: {
        content: {
          '*/*': components['schemas']['SuccessResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReportedAdjudicationDetailsV2: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all reported adjudications for caseload */
  getReportedAdjudications: {
    parameters: {
      query: {
        /** @description optional inclusive start date for results, default is today - 3 days */
        startDate?: string
        /** @description optional inclusive end date for results, default is today */
        endDate?: string
        /** @description list of status filter for reports */
        status: (
          | 'ACCEPTED'
          | 'REJECTED'
          | 'AWAITING_REVIEW'
          | 'RETURNED'
          | 'UNSCHEDULED'
          | 'SCHEDULED'
          | 'REFER_POLICE'
          | 'REFER_INAD'
          | 'REFER_GOV'
          | 'PROSECUTION'
          | 'DISMISSED'
          | 'NOT_PROCEED'
          | 'ADJOURNED'
          | 'CHARGE_PROVED'
          | 'QUASHED'
          | 'INVALID_OUTCOME'
          | 'INVALID_SUSPENDED'
          | 'INVALID_ADA'
        )[]
        /** @description optional filter for transferred reports only */
        transfersOnly?: boolean
        pageable: components['schemas']['Pageable']
        /** @description Results page you want to retrieve (0..N). Default 0, e.g. the first page */
        page?: string
        /** @description Number of records per page. Default 20 */
        size?: string
        /** @description Sort as combined comma separated property and uppercase direction. Multiple sort params allowed to sort by multiple properties. Default to dateTimeOfDiscovery DESC */
        sort?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PageReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get report counts by agency */
  getReportCounts: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['AgencyReportCountsDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** get a list of suspended punishments by prisoner */
  getSuspendedPunishments: {
    parameters: {
      query: {
        chargeNumber: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        prisonerNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SuspendedPunishmentDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** get a list of active additional days reports by prisoner for a consecutive punishment */
  getActiveAdditionalDaysReports: {
    parameters: {
      query: {
        type:
          | 'PRIVILEGE'
          | 'EARNINGS'
          | 'CONFINEMENT'
          | 'REMOVAL_ACTIVITY'
          | 'EXCLUSION_WORK'
          | 'EXTRA_WORK'
          | 'REMOVAL_WING'
          | 'ADDITIONAL_DAYS'
          | 'PROSPECTIVE_DAYS'
          | 'CAUTION'
          | 'DAMAGES_OWED'
        chargeNumber: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        prisonerNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['AdditionalDaysDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** get a list of active punishments by offenderBookingId */
  getActivePunishments: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        offenderBookingId: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ActivePunishmentDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all adjudications for a prisoner */
  getAdjudicationsForPrisoner: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description prisoner number */
        prisonerNumber: string
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['ReportedAdjudicationDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get my reported adjudications for caseload */
  getMyReportedAdjudications: {
    parameters: {
      query: {
        /** @description optional inclusive start date for results, default is today - 3 days */
        startDate?: string
        /** @description optional inclusive end date for results, default is today */
        endDate?: string
        /** @description list of status filter for reports */
        status: (
          | 'ACCEPTED'
          | 'REJECTED'
          | 'AWAITING_REVIEW'
          | 'RETURNED'
          | 'UNSCHEDULED'
          | 'SCHEDULED'
          | 'REFER_POLICE'
          | 'REFER_INAD'
          | 'REFER_GOV'
          | 'PROSECUTION'
          | 'DISMISSED'
          | 'NOT_PROCEED'
          | 'ADJOURNED'
          | 'CHARGE_PROVED'
          | 'QUASHED'
          | 'INVALID_OUTCOME'
          | 'INVALID_SUSPENDED'
          | 'INVALID_ADA'
        )[]
        pageable: components['schemas']['Pageable']
        /**
         * @description Results page you want to retrieve (0..N). Default 0, e.g. the first page
         * @example 0
         */
        page?: string
        /** @description Number of records per page. Default 20 */
        size?: string
        /** @description Sort as combined comma separated property and uppercase direction. Multiple sort params allowed to sort by multiple properties. Default to dateTimeOfDiscovery DESC */
        sort?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PageReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get a list of hearings for a given date and agency */
  getAllHearingsByAgencyAndDate: {
    parameters: {
      query: {
        hearingDate: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['HearingSummaryResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all reported adjudications for print */
  getReportedAdjudicationsForPrint: {
    parameters: {
      query: {
        /** @description optional inclusive hearing start date for results, default is today */
        startDate?: string
        /** @description optional inclusive hearing end date for results, default is today + 2 */
        endDate?: string
        /** @description list of issue status, as comma separated String */
        issueStatus: ('ISSUED' | 'NOT_ISSUED')[]
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['IssuableAdjudicationsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all reported adjudications for issue */
  getReportedAdjudicationsForIssue: {
    parameters: {
      query?: {
        /** @description optional inclusive start date for results, default is today - 2 days */
        startDate?: string
        /** @description optional inclusive end date for results, default is today */
        endDate?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['IssuableAdjudicationsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get adjudications for all offender bookings for a prisoner */
  getAdjudicationsForPrisoner_1: {
    parameters: {
      query: {
        /** @description optional inclusive start date for results */
        startDate?: string
        /** @description optional inclusive end date for results */
        endDate?: string
        /** @description list of status filter for reports */
        status: (
          | 'ACCEPTED'
          | 'REJECTED'
          | 'AWAITING_REVIEW'
          | 'RETURNED'
          | 'UNSCHEDULED'
          | 'SCHEDULED'
          | 'REFER_POLICE'
          | 'REFER_INAD'
          | 'REFER_GOV'
          | 'PROSECUTION'
          | 'DISMISSED'
          | 'NOT_PROCEED'
          | 'ADJOURNED'
          | 'CHARGE_PROVED'
          | 'QUASHED'
          | 'INVALID_OUTCOME'
          | 'INVALID_SUSPENDED'
          | 'INVALID_ADA'
        )[]
        /** @description show reports with ADA */
        ada?: boolean
        /** @description show reports with PADA */
        pada?: boolean
        /** @description show reports with suspended */
        suspended?: boolean
        pageable: components['schemas']['Pageable']
        /** @description Results page you want to retrieve (0..N). Default 0, e.g. the first page */
        page?: string
        /** @description Number of records per page. Default 20 */
        size?: string
        /** @description Sort as combined comma separated property and uppercase direction. Multiple sort params allowed to sort by multiple properties. Default to date_time_of_discovery DESC */
        sort?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description prisoner number */
        prisonerNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PageReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get adjudications for an offender booking */
  getAdjudicationsForBooking: {
    parameters: {
      query: {
        /** @description optional inclusive start date for results */
        startDate?: string
        /** @description optional inclusive end date for results */
        endDate?: string
        /** @description list of status filter for reports */
        status: (
          | 'ACCEPTED'
          | 'REJECTED'
          | 'AWAITING_REVIEW'
          | 'RETURNED'
          | 'UNSCHEDULED'
          | 'SCHEDULED'
          | 'REFER_POLICE'
          | 'REFER_INAD'
          | 'REFER_GOV'
          | 'PROSECUTION'
          | 'DISMISSED'
          | 'NOT_PROCEED'
          | 'ADJOURNED'
          | 'CHARGE_PROVED'
          | 'QUASHED'
          | 'INVALID_OUTCOME'
          | 'INVALID_SUSPENDED'
          | 'INVALID_ADA'
        )[]
        /** @description list of agencies to filter for reports, based on current booking */
        agency: string[]
        /** @description show reports with ADA */
        ada?: boolean
        /** @description show reports with PADA */
        pada?: boolean
        /** @description show reports with suspended */
        suspended?: boolean
        pageable: components['schemas']['Pageable']
        /** @description Results page you want to retrieve (0..N). Default 0, e.g. the first page */
        page?: string
        /** @description Number of records per page. Default 20 */
        size?: string
        /** @description Sort as combined comma separated property and uppercase direction. Multiple sort params allowed to sort by multiple properties. Default to date_time_of_discovery DESC */
        sort?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PageReportedAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all adjudications for an offender booking id */
  getAdjudicationsForBooking_1: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description offender booking id */
        offenderBookingId: number
      }
    }
    responses: {
      /** @description success */
      200: {
        content: {
          'application/json': components['schemas']['ReportedAdjudicationDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns the draft adjudication details. */
  getDraftAdjudicationDetails: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['DraftAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Delete by Id. Only owner can delete. */
  deleteDraftAdjudication: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all the offence rules */
  getOffenceRules: {
    parameters: {
      query: {
        youthOffender: boolean
        gender?: 'MALE' | 'FEMALE'
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OffenceRuleDetailsDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns details of the offence rule relating to this offence code. */
  getOffenceRule: {
    parameters: {
      query: {
        youthOffender: boolean
        gender?: 'MALE' | 'FEMALE'
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        offenceCode: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OffenceRuleDetailsDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all the in progress draft adjudications created by the current user */
  getCurrentUsersInProgressDraftAdjudications: {
    parameters: {
      query: {
        /** @description optional inclusive start date for results, default is today - 3 days */
        startDate?: string
        /** @description optional inclusive end date for results, default is today */
        endDate?: string
        pageable: components['schemas']['Pageable']
        /**
         * @description Results page you want to retrieve (0..N). Default 0, e.g. the first page
         * @example 0
         */
        page?: string
        /** @description Number of records per page. Default 20 */
        size?: string
        /** @description Sort as combined comma separated property and uppercase direction. Multiple sort params allowed to sort by multiple properties. Default to dateTimeOfDiscovery,DESC */
        sort?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PageDraftAdjudicationDto']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Return a specific adjudication for a prisoner reference by charge ID */
  getAdjudication: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /**
         * @description prisonerNumber
         * @example A1234AA
         */
        prisonerNumber: string
        /** @description chargeId */
        chargeId: number
      }
    }
    responses: {
      /** @description Adjudication returned */
      200: {
        content: {
          '*/*': components['schemas']['IndividualAdjudication']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Return a list of adjudications for a given prisoner */
  getAdjudicationsByPrisonerNumber: {
    parameters: {
      query?: {
        /** @description An offence id to allow optionally filtering by type of offence */
        offenceId?: number
        /** @description An agency id to allow optionally filtering by the prison in which the offence occurred */
        agencyId?: string
        /**
         * @description Finding code to allow optionally filtering by type of finding
         * @example NOT_PROVEN
         */
        finding?:
          | 'APPEAL'
          | 'D'
          | 'DISMISSED'
          | 'GUILTY'
          | 'NOT_GUILTY'
          | 'NOT_PROCEED'
          | 'NOT_PROVEN'
          | 'PROSECUTED'
          | 'PROVED'
          | 'QUASHED'
          | 'REFUSED'
          | 'REF_POLICE'
          | 'S'
          | 'UNFIT'
          | 'ADJOURNED'
        /** @description Adjudications must have been reported on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Adjudications must have been reported on or before this date (in YYYY-MM-DD format). */
        toDate?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /**
         * @description prisonerNumber
         * @example A1234AA
         */
        prisonerNumber: string
      }
    }
    responses: {
      /** @description Adjudications returned */
      200: {
        content: {
          '*/*': components['schemas']['AdjudicationSearchResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Offender adjudications summary (awards and sanctions).
   * @description Offender adjudications (awards and sanctions).
   */
  getAdjudicationSummary: {
    parameters: {
      query?: {
        /** @description Only awards ending on or after this date (in YYYY-MM-DD format) will be considered. */
        awardCutoffDate?: string
        /** @description Only proved adjudications ending on or after this date (in YYYY-MM-DD format) will be counted. */
        adjudicationCutoffDate?: string
      }
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description The prisoner booking id */
        bookingId: number
      }
    }
    responses: {
      /** @description Adjudication returned */
      200: {
        content: {
          '*/*': components['schemas']['AdjudicationSummary']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Does the booking id have any adjudications
   * @description Does the booking id have any adjudications
   */
  hasAdjudications: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        /** @description The prisoner booking id */
        bookingId: number
      }
    }
    responses: {
      /** @description Has adjudications */
      200: {
        content: {
          '*/*': components['schemas']['HasAdjudicationsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** remove a referral */
  removeReferral: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** remove a completed hearing outcome */
  removeCompletedHearingOutcome: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** delete punishment comment */
  deletePunishmentComment: {
    parameters: {
      header?: {
        /**
         * @description Current Caseload for request, to be used when making calls to a specific report
         * @example MDI
         */
        'Active-Caseload'?: string
      }
      path: {
        chargeNumber: string
        punishmentCommentId: number
      }
    }
    responses: {
      /** @description Punishment comment deleted */
      200: {
        content: {
          '*/*': components['schemas']['ReportedAdjudicationResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not able to process the request because the header “Accept” does not match with any of the content types this endpoint can handle */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
