name: Integration tests
on:
  workflow_call:
    inputs:
      node_version_file:
        description: "Passed to setup-node action to specify where to source the version of node from"
        required: false
        type: string
        default: ".nvmrc"
permissions:
  contents: read
jobs:
  integration_test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ inputs.node_version_file }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.node_version_file }}
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm_build_artifacts
      - name: restore cache
        id: restore-cache
        uses: actions/cache/restore@v4
        env:
          cache-name: node-modules
        with:
          path: |
            ./node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json', '!**/node_modules/**') }}
      - name: Init testing framework if necessary
        run: npm run int-test-init:ci --if-present
      - name: Get wiremock
        shell: bash
        run: |
          curl -o wiremock.jar https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.9.1/wiremock-standalone-3.9.1.jar
      - name: Prepare and run integration tests
        id: integration-tests
        shell: bash
        env:
          LAUNCHPAD_API_CLIENT_ID: ${{ secrets.LAUNCHPAD_API_CLIENT_ID }}
          LAUNCHPAD_API_CLIENT_SECRET: ${{ secrets.LAUNCHPAD_API_CLIENT_SECRET }}
          LAUNCHPAD_AUTH_URL: ${{ secrets.LAUNCHPAD_AUTH_URL }}
          HMPPS_AUTH_URL: ${{ secrets.HMPPS_AUTH_URL }}
          PRISON_API_URL: ${{ secrets.PRISON_API_URL }}
          SYSTEM_CLIENT_ID: ${{ secrets.SYSTEM_CLIENT_ID }}
          SYSTEM_CLIENT_SECRET: ${{ secrets.SYSTEM_CLIENT_SECRET }}
          APPINSIGHTS_INSTRUMENTATIONKEY: ${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}
          AUDIT_ENABLED: ${{ secrets.AUDIT_ENABLED }}
        run: |
          # Start Wiremock in background
          echo "Starting Wiremock..."
          nohup java -jar wiremock.jar --port 9091 > wiremock.log 2>&1 &
          WIREMOCK_PID=$!
          echo "Wiremock started on port 9091 (PID: $WIREMOCK_PID)"
          
          # Start the application in background  
          echo "Starting application..."
          nohup npm run start-feature > app.log 2>&1 &
          APP_PID=$!
          echo "Application started (PID: $APP_PID)"
          
          # Function to cleanup on exit
          cleanup() {
            echo "Cleaning up processes..."
            kill $WIREMOCK_PID 2>/dev/null || true
            kill $APP_PID 2>/dev/null || true
            pkill -f "java.*wiremock" 2>/dev/null || true
            pkill -f "npm run start-feature" 2>/dev/null || true
          }
          trap cleanup EXIT
          
          # Wait for Wiremock to be ready first
          echo "Waiting for Wiremock to be ready..."
          timeout 30 bash -c 'until curl -f http://localhost:9091/__admin > /dev/null 2>&1; do 
            echo -n "."
            sleep 1
          done' || {
            echo "‚ùå Wiremock failed to start within 30 seconds"
            echo "Wiremock logs:"
            tail -20 wiremock.log 2>/dev/null || echo "No wiremock logs available"
            exit 1
          }
          echo "‚úÖ Wiremock is ready"
          
          # Wait for application to be ready
          echo "Waiting for application to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000/ping > /dev/null 2>&1; do 
            echo -n "."
            sleep 2
          done' || {
            echo "‚ùå Application failed to start within 120 seconds"
            echo "Application logs:"
            tail -50 app.log 2>/dev/null || echo "No application logs available"
            echo "Process status:"
            ps aux | grep -E "(node|npm)" | grep -v grep || echo "No node processes found"
            echo "Port status:"
            netstat -tulpn | grep 3000 || echo "Port 3000 not in use"
            exit 1
          }
          echo "‚úÖ Application is ready"
          
          # Give a bit more time for everything to settle
          echo "Waiting 5 seconds for services to stabilize..."
          sleep 5
          
          echo "üß™ Running integration tests..."
          
          # Set additional debugging environment variables for enhanced logging
          export DEBUG=pw:*
          export PLAYWRIGHT_LOG_LEVEL=info
          export NODE_ENV=test
          export CI=true
          
          # Run tests with enhanced output capture
          npm run int-test 2>&1 | tee integration_test_output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          
          echo "üìä Integration test run completed with exit code: $TEST_EXIT_CODE"
          
          # Display summary of test output for quick CI debugging
          if [ -f "integration_test_output.log" ]; then
            echo "üîç Test output summary (last 50 lines):"
            tail -50 integration_test_output.log
            
            # Look for specific error patterns and highlight them
            echo "‚ùå Detected errors and failures:"
            grep -i "error\|failed\|timeout\|crash" integration_test_output.log | head -20 || echo "No obvious errors found in logs"
            
            # Look for navigation URLs
            echo "üß≠ Navigation attempts detected:"
            grep -i "navigat\|goto\|url" integration_test_output.log | head -10 || echo "No navigation logs found"
          fi
          
          # Exit with the same code as the test run
          exit $TEST_EXIT_CODE
      - name: Check generated reports and screenshots
        if: ${{ !cancelled() }}
        run: |
          echo "üìä Checking for generated reports and test artifacts..."
          
          # Display comprehensive log information
          if [ -f "integration_test_output.log" ]; then
            echo "üìù Integration test log file size: $(wc -l < integration_test_output.log) lines"
            
            # Show critical errors from the test run
            echo "üö® Critical errors from test run:"
            grep -i "error\|exception\|crash\|timeout" integration_test_output.log | tail -20 || echo "No critical errors found"
            
            # Show all navigation attempts
            echo "üó∫Ô∏è  All navigation attempts:"
            grep -i "navigat\|goto\|url.*http" integration_test_output.log || echo "No navigation logs found"
          fi
          
          # Show application logs if available
          if [ -f "app.log" ]; then
            echo "üì± Application log summary (last 30 lines):"
            tail -30 app.log
            
            echo "üîç Application errors:"
            grep -i "error\|exception\|fail" app.log | tail -10 || echo "No application errors found"
          fi
          
          # Show Wiremock logs if available
          if [ -f "wiremock.log" ]; then
            echo "üé≠ Wiremock log summary (last 20 lines):"
            tail -20 wiremock.log
            
            echo "üîç Wiremock errors:"
            grep -i "error\|exception" wiremock.log | tail -5 || echo "No Wiremock errors found"
          fi
          
          echo "üìä Playwright report directory:"
          ls -la playwright-report/ 2>/dev/null || echo "No playwright-report directory found"
          echo "Test results directory (screenshots, videos, traces):"
          ls -la test-results/ 2>/dev/null || echo "No test-results directory found"
          if [ -d "test-results" ]; then
            echo "Contents of test-results:"
            find test-results -type f -name "*.png" -o -name "*.webm" -o -name "*.zip" -o -name "*.har" | head -10
            
            # Show HAR file info if network debugging is enabled
            if find test-results -name "*.har" -type f | head -1 | grep -q .; then
              echo "üåê Network HAR files found - these contain network request logs"
            fi
          fi
          echo "Legacy integration test directories:"
          ls -la integration_tests/videos/ 2>/dev/null || echo "No integration_tests/videos directory found"
          ls -la integration_tests/screenshots/ 2>/dev/null || echo "No integration_tests/screenshots directory found"
      - name: upload results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: npm_integration_test_artifacts
          path: |
            integration_tests/videos/
            integration_tests/screenshots/
            playwright-report/
            test-results/
            coverage/
            ctrf/
            integration_test_output.log
            app.log
            wiremock.log
      - name: Upload Playwright Report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: fail the action if the tests failed
        if: ${{ steps.integration-tests.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Integration tests failed')
